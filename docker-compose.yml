# For more information: https://laravel.com/docs/sail
version: '3'
services:
    gpsvaultlocal:
        build:
            context: ./docker/8.1
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: sail-8.1/app
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '81:80'
            - '${LARAVEL_WEBSOCKETS_PORT:-6001}:6001'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - pgsql
            - redis
            - meilisearch
            - selenium
    caddy:
        image: caddy/caddy:2.5.1-alpine
        restart: unless-stopped
        environment:
            APP_URL: '${APP_URL}'
        ports:
            - '${APP_PORT:-80}:81'
            - '443:443'
        volumes:
            - './Caddyfile:/etc/caddy/Caddyfile'
            - sailcaddy:/data
            - sailcaddy:/config
        networks:
            - sail
        depends_on:
            -   gpsvaultlocal
    pgsql:
        build:
            context: ./docker/8.1
            dockerfile: Dockerfile.postgis
            args:
                POSTGIS_MAJOR: '3'
                POSTGIS_VERSION: '3.3.3+dfsg-1.pgdg120+1'
        image: postgres-14/app
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - './docker/8.1:/docker-entrypoint-initdb.d'
            - 'sailpgsql:/var/lib/postgresql/data'
        networks:
            - sail
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}" ]
            retries: 3
            timeout: 5s
    redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - 'sailredis:/data'
        networks:
            - sail
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            retries: 3
            timeout: 5s
    meilisearch:
        image: 'getmeili/meilisearch:latest'
        ports:
            - '${FORWARD_MEILISEARCH_PORT:-7700}:7700'
        volumes:
            - 'sailmeilisearch:/data.ms'
        networks:
            - sail
        healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--spider",  "http://localhost:7700/health"]
            retries: 3
            timeout: 5s
    mailhog:
        image: 'mailhog/mailhog:latest'
        ports:
            - '${FORWARD_MAILHOG_PORT:-1025}:1025'
            - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'
        networks:
            - sail
    selenium:
        image: 'selenium/standalone-chrome:86.0-chromedriver-86.0'
        ports:
            - '${FORWARD_SELENIUM_PORT:-4444}:4444'
            - '5900:5900'
        volumes:
            - '/dev/shm:/dev/shm'
        networks:
            - sail
#    valhalla:
#        image: 'ghcr.io/gis-ops/docker-valhalla/valhalla:latest'
#        ports:
#            - '${FORWARD_VALHALLA_PORT:-8002}:8002'
#        volumes:
#            - sailvalhalla:/custom_files
#        environment:
#            tile_urls: 'http://download.geofabrik.de/europe/great-britain/england/buckinghamshire-latest.osm.pbf' # Add as many (space-separated) URLs as you like, e.g. https://download.geofabrik.de/europe/andorra-latest.osm.pbf
#            use_tiles_ignore_pbf: 'False' # True uses a local tile.tar file and skips building. Default False.
#            force_rebuild: 'False' # True forces a rebuild of the routing tiles. Default False.
#            build_elevation: 'True' # True downloads elevation tiles which are covering the routing graph. Force will do the same, but first delete any existing elevation tiles. Default False.
#            build_admins: 'True' # builds the admin db needed for things like border-crossing penalties and detailed routing responses. Force will do the same, but first delete the existing db. Default False.
#            build_time_zones: 'True' # True builds the timezone db which is needed for time-dependent routing. Force will do the same, but first delete the existing db. Default False.
#            build_tar: 'True' # True creates a tarball of the tiles including an index which allows for extremely faster graph loading after reboots. Force will do the same, but first delete the existing tarball. Default True.
#            server_threads: 1 # How many threads valhalla_service will run with. Default is the value of nproc.

networks:
    sail:
        driver: bridge
volumes:
    sailpgsql:
        driver: local
    sailredis:
        driver: local
    sailmeilisearch:
        driver: local
    sailcaddy:
        driver: local
#    sailvalhalla:
#        driver: local
