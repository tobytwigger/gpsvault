{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Developers","title":"Introduction"},{"location":"#developers","text":"","title":"Developers"},{"location":"developers/activities/","text":"Activities Activities are rides that you have completed in the past. Activity Importer The normal way to import an activity is through the ActivityController 'store' method. This will receive and store an activity file, and use the activity importer at App\\Services\\ActivityImport\\ActivityImporter to import the activity with the given name. The end result of this is a row in the activities table with the file_id representing the gpx file for the ride, a name, and a user to link to. Having saved the activity, we can call $activity->analyse() . This will dispatch an AnalyseActivityFile job. Has Stats You can read more about the analyser in the relevant documentation . Once we have the analysis result, this gets saved against the Stats model, which contains all the information you need to know about the activity. The benefit of this is we can get analysis from many different sources and easily compare them. As well as a row in the 'stats' table, we also save each of the individual points, and the stats for that point (elevation, heart rate, speed, location etc).","title":"Activities"},{"location":"developers/activities/#activities","text":"Activities are rides that you have completed in the past.","title":"Activities"},{"location":"developers/activities/#activity-importer","text":"The normal way to import an activity is through the ActivityController 'store' method. This will receive and store an activity file, and use the activity importer at App\\Services\\ActivityImport\\ActivityImporter to import the activity with the given name. The end result of this is a row in the activities table with the file_id representing the gpx file for the ride, a name, and a user to link to. Having saved the activity, we can call $activity->analyse() . This will dispatch an AnalyseActivityFile job.","title":"Activity Importer"},{"location":"developers/activities/#has-stats","text":"You can read more about the analyser in the relevant documentation . Once we have the analysis result, this gets saved against the Stats model, which contains all the information you need to know about the activity. The benefit of this is we can get analysis from many different sources and easily compare them. As well as a row in the 'stats' table, we also save each of the individual points, and the stats for that point (elevation, heart rate, speed, location etc).","title":"Has Stats"},{"location":"developers/analysis/","text":"- How the analyser works","title":"Analysis"},{"location":"developers/analysis/#-how-the-analyser-works","text":"","title":"- How the analyser works"},{"location":"developers/get-started/","text":"Getting Started Cloning the project. Running the site locally. Contributing back to the repo.","title":"Getting Started"},{"location":"developers/get-started/#getting-started","text":"Cloning the project. Running the site locally. Contributing back to the repo.","title":"Getting Started"},{"location":"developers/routes/","text":"Routes A route is a planned path you can upload to a cycle computer. Upload a route If you upload a route from a file, much the same as an activity, we will create a row in the route table, then call $route->analyse() . This will dispatch the AnalyseRouteFile job, which will run the file through the analyser to get all the relevant information, then create a new linestring. Route database structure With an activity, we keep a single list of points representing the activity. With a route, we want to be able to see the history of the route and so we create a 'route path'. We create a new route path attached to the route, with the linestring, distance and elevation gain. For any points of interest along the route, we can also attach these to a route path. This doesn't apply when uploading a route path file though. A point along the route path can be associated with a 'place', or just be a stand alone point.","title":"Routes"},{"location":"developers/routes/#routes","text":"A route is a planned path you can upload to a cycle computer.","title":"Routes"},{"location":"developers/routes/#upload-a-route","text":"If you upload a route from a file, much the same as an activity, we will create a row in the route table, then call $route->analyse() . This will dispatch the AnalyseRouteFile job, which will run the file through the analyser to get all the relevant information, then create a new linestring.","title":"Upload a route"},{"location":"developers/routes/#route-database-structure","text":"With an activity, we keep a single list of points representing the activity. With a route, we want to be able to see the history of the route and so we create a 'route path'. We create a new route path attached to the route, with the linestring, distance and elevation gain. For any points of interest along the route, we can also attach these to a route path. This doesn't apply when uploading a route path file though. A point along the route path can be associated with a 'place', or just be a stand alone point.","title":"Route database structure"}]}